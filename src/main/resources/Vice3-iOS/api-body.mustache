{{#operations}}
#import "{{classname}}.h"
#import "NSString+Path.h"
{{#imports}}#import "{{import}}.h"
{{/imports}}

@implementation {{classname}}

{{#operation}}
+ (void){{operationId}}{{#allParams}}{{^secondaryParam}}With{{/secondaryParam}}{{/allParams}}{{#allParams}}{{#secondaryParam}} {{paramName}}{{/secondaryParam}}:({{{dataType}}}){{paramName}}{{^hasMore}} s{{/hasMore}}{{/allParams}}{{^allParams}}WithS{{/allParams}}uccess:(void (^)({{#returnBaseType}}{{returnType}} response{{/returnBaseType}}{{^returnBaseType}}id unused{{/returnBaseType}}))successBlock error:(void (^)(NSError* error))errorBlock
{
    {{#allParams}}{{#required}}if ({{paramName}} == nil) [NSException raise:@"Invalid parameter" format:@"Missing the required parameter `{{paramName}}` when calling `{{nickname}}`"];{{/required}}
    {{/allParams}}
    ApiRequest* req = [ApiRequest new];
    req.method = @"{{httpMethod}}";
    req.path = @"{{path}}";

    {{#returnBaseType}}static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{ [(NSMutableDictionary*)[self modelClassesByResourcePath] setObject:[{{returnBaseType}} class] forKey:[req.path pathPattern]]; });
    {{/returnBaseType}}
    {{#pathParams}}if ({{paramName}} != nil) req.pathParams[@"{{baseName}}"] = {{paramName}};{{/pathParams}}
    {{#queryParams}}if ({{paramName}} != nil) req.queryParams[@"{{baseName}}"] = {{paramName}};{{/queryParams}}{{#bodyParam}}req.body = [{{paramName}} toDictionary];{{/bodyParam}}{{^bodyParam}}{{#formParams}}{{#notFile}}
    if ({{paramName}} != nil) req.queryParams[@"{{baseName}}"] = {{paramName}};{{/notFile}}{{#isFile}}{{/isFile}}{{/formParams}}{{/bodyParam}}

    req.successBlock = successBlock;
    req.errorBlock = errorBlock;
    [self sendRequest:req];    
}

{{/operation}}
{{/operations}}
@end
